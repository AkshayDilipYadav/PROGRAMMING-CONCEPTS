Object Oriented Programming

OOP is a programming paradigm that organizes software design around objects, rather than functions or logic.

An object is an instance of a class, which bundles data (fields/attributes) and behaviour (methods/functions) together.

OOP is a methodology for designing and building software using objects that interact with each other, modelling real-world entities,
and encapsulating data and behaviour.

There are four main pillars of OOP:

1. Encapsulation

Definition: Hiding the internal state of an object and providing controlled access via methods.

Benefit: Improves security and maintainability.

2.  Abstraction

Definition: Hiding implementation details and exposing only essential functionality.

Benefit: Lets you program to interfaces/abstract types, not specific implementations.

3.  Inheritance

Definition: Mechanism by which one class (subclass) acquires fields and methods of another class (superclass).

Benefit: Promotes code reuse and a hierarchical relationship.

4.  Polymorphism

Definition: Ability of an object to take many forms; the same method call can behave differently depending on the object.

Benefit: Enhances flexibility and extensibility.





---- Shallow Copy and Deep Copy -------------


A shallow copy of an object is a copy where the fields of the object are copied as-is, including references.
In other words, the top-level object is duplicated, but the objects it refers to are not; 
they are shared between the original and the copy.

Only the references are copied, not the actual objects they point to.
Modifying a nested object in the copy will affect the original.

A deep copy of an object is a copy where all objects are duplicated recursively, not just the top-level object.
The copy and the original are completely independent, including all nested objects.

Modifying the copy does not affect the original.


-------------------   Static Non Static ------------------------------------------


A static member (variable or method) belongs to the class itself, rather than to any particular instance of the class.
Static members are shared across all instances of the class.

Declared using the static keyword.

Exists once per class, not per object.

Can be accessed without creating an instance of the class.

Typical uses: constants, utility methods, counters, shared resources.



A non-static (instance) member belongs to each individual object of the class.
Each object has its own copy of instance variables and can access instance methods.

Declared without static.

Exists once per object.

Can only be accessed through an object reference.

Typical uses: object-specific data, behaviors.







